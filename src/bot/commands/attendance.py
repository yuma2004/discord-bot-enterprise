"""Attendance management commands - Clean TDD implementation"""
import discord
from discord.ext import commands
from datetime import datetime, date
import csv
import io
from typing import Optional, Dict, Any, List

from src.core.database import get_database_manager, DatabaseError
from src.core.error_handling import (
    get_error_handler, handle_errors, UserError, SystemError,
    ErrorContext
)
from src.core.logging import get_logger, log_command_execution, log_user_action
from src.utils.datetime_utils import (
    now_jst, today_jst, ensure_jst, format_time_only, 
    format_datetime_for_display, get_month_date_range,
    parse_date_string, calculate_work_hours, calculate_time_difference,
    format_date_only
)
from src.bot.core import require_registration, admin_only

logger = get_logger(__name__)


class AttendanceView(discord.ui.View):
    """Âá∫ÈÄÄÂã§ÁÆ°ÁêÜÁî®„ÅÆ„Éú„Çø„É≥UI"""
    
    def __init__(self):
        super().__init__(timeout=None)  # „Çø„Ç§„É†„Ç¢„Ç¶„Éà„Å™„Åó
        self.error_handler = get_error_handler()
    
    @discord.ui.button(label='üü¢ Âá∫Âã§', style=discord.ButtonStyle.green, custom_id='clock_in')
    async def clock_in_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Âá∫Âã§„Éú„Çø„É≥"""
        await interaction.response.defer()
        
        context = ErrorContext(
            user_id=interaction.user.id,
            guild_id=interaction.guild.id if interaction.guild else None,
            channel_id=interaction.channel.id if interaction.channel else None,
            command="attendance_clock_in"
        )
        
        try:
            db_manager = get_database_manager()
            
            # „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèñÂæó„Åæ„Åü„ÅØ‰ΩúÊàê
            user = await db_manager.get_user(interaction.user.id)
            if not user:
                user_id = await db_manager.create_user(
                    discord_id=interaction.user.id,
                    username=interaction.user.name,
                    display_name=interaction.user.display_name
                )
                user = {'id': user_id, 'discord_id': interaction.user.id}
            
            today_date = format_date_only(today_jst())
            
            # ‰ªäÊó•„ÅÆÂá∫ÈÄÄÂã§Ë®òÈå≤„ÇíÁ¢∫Ë™ç
            today_record = await db_manager.get_attendance_record(user['discord_id'], today_date)
            
            if today_record and today_record.get('check_in'):
                embed = discord.Embed(
                    title="‚ö†Ô∏è Êó¢„Å´Âá∫Âã§Ê∏à„Åø",
                    description="Êú¨Êó•„ÅØÊó¢„Å´Âá∫Âã§Ë®òÈå≤„Åå„ÅÇ„Çä„Åæ„Åô",
                    color=discord.Color.orange(),
                    timestamp=now_jst()
                )
                embed.add_field(
                    name="Âá∫Âã§ÊôÇÂàª",
                    value=format_time_only(today_record['check_in']),
                    inline=True
                )
                embed.add_field(
                    name="ÁèæÂú®„ÅÆ„Çπ„ÉÜ„Éº„Çø„Çπ",
                    value="Âú®Â∏≠",
                    inline=True
                )
            else:
                # Âá∫Âã§Ë®òÈå≤
                check_in_time = now_jst()
                if today_record:
                    # Êó¢Â≠ò„É¨„Ç≥„Éº„Éâ„ÇíÊõ¥Êñ∞
                    success = await db_manager.update_attendance_record(
                        user['discord_id'], today_date, check_in=check_in_time
                    )
                else:
                    # Êñ∞Ë¶è„É¨„Ç≥„Éº„Éâ‰ΩúÊàê
                    await db_manager.create_attendance_record(
                        user['discord_id'], today_date, check_in_time
                    )
                    success = True
                
                if success:
                    embed = discord.Embed(
                        title="üü¢ Âá∫Âã§Ë®òÈå≤ÂÆå‰∫Ü",
                        description="„ÅäÁñ≤„ÇåÊßò„Åß„ÅôÔºÅÂá∫Âã§„ÇíË®òÈå≤„Åó„Åæ„Åó„Åü",
                        color=discord.Color.green(),
                        timestamp=now_jst()
                    )
                    embed.add_field(
                        name="Âá∫Âã§ÊôÇÂàª",
                        value=format_time_only(check_in_time),
                        inline=True
                    )
                    embed.add_field(
                        name="„Çπ„ÉÜ„Éº„Çø„Çπ",
                        value="Âú®Â∏≠",
                        inline=True
                    )
                    
                    log_user_action(
                        logger, interaction.user.id, "clock_in",
                        time=check_in_time.isoformat()
                    )
                else:
                    raise SystemError("Failed to create attendance record", error_code="ATTENDANCE_CREATE_FAILED")
            
            embed.set_footer(text=f"{interaction.user.display_name}")
            await interaction.followup.send(embed=embed, ephemeral=True)
            
        except Exception as e:
            result = await self.error_handler.handle_error_async(e, context)
            if result.should_notify_user:
                embed = discord.Embed(
                    title="‚ùå „Ç®„É©„Éº",
                    description=result.user_message,
                    color=discord.Color.red()
                )
                await interaction.followup.send(embed=embed, ephemeral=True)
    
    @discord.ui.button(label='üî¥ ÈÄÄÂã§', style=discord.ButtonStyle.red, custom_id='clock_out')
    async def clock_out_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """ÈÄÄÂã§„Éú„Çø„É≥"""
        await interaction.response.defer()
        
        context = ErrorContext(
            user_id=interaction.user.id,
            guild_id=interaction.guild.id if interaction.guild else None,
            channel_id=interaction.channel.id if interaction.channel else None,
            command="attendance_clock_out"
        )
        
        try:
            db_manager = get_database_manager()
            
            # „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèñÂæó
            user = await db_manager.get_user(interaction.user.id)
            if not user:
                raise UserError(
                    "User not found",
                    "Âá∫Âã§Ë®òÈå≤„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ„Åæ„ÅöÂá∫Âã§„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
                    error_code="USER_NOT_FOUND"
                )
            
            today_date = format_date_only(today_jst())
            today_record = await db_manager.get_attendance_record(user['discord_id'], today_date)
            
            if not today_record or not today_record.get('check_in'):
                raise UserError(
                    "No check-in record found",
                    "Âá∫Âã§Ë®òÈå≤„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ„Åæ„ÅöÂá∫Âã§„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
                    error_code="NO_CHECK_IN"
                )
            
            if today_record.get('check_out'):
                raise UserError(
                    "Already checked out",
                    "Êó¢„Å´ÈÄÄÂã§Ê∏à„Åø„Åß„Åô„ÄÇ",
                    error_code="ALREADY_CHECKED_OUT"
                )
            
            # ÈÄÄÂã§Ë®òÈå≤
            check_out_time = now_jst()
            check_in_time = today_record['check_in']
            
            # Âã§ÂãôÊôÇÈñì„ÇíË®àÁÆó
            work_hours = calculate_work_hours(
                check_in_time, check_out_time,
                today_record.get('break_start'), today_record.get('break_end')
            )
            overtime_hours = max(0.0, work_hours - 8.0)  # 8ÊôÇÈñì„ÇíÊ®ôÊ∫ñÂã§ÂãôÊôÇÈñì„Å®„Åô„Çã
            
            success = await db_manager.update_attendance_record(
                user['discord_id'], today_date,
                check_out=check_out_time,
                work_hours=work_hours,
                overtime_hours=overtime_hours
            )
            
            if success:
                embed = discord.Embed(
                    title="üî¥ ÈÄÄÂã§Ë®òÈå≤ÂÆå‰∫Ü",
                    description="„ÅäÁñ≤„ÇåÊßò„Åß„Åó„ÅüÔºÅÈÄÄÂã§„ÇíË®òÈå≤„Åó„Åæ„Åó„Åü",
                    color=discord.Color.red(),
                    timestamp=now_jst()
                )
                
                embed.add_field(
                    name="Âá∫Âã§ÊôÇÂàª",
                    value=format_time_only(check_in_time),
                    inline=True
                )
                embed.add_field(
                    name="ÈÄÄÂã§ÊôÇÂàª",
                    value=format_time_only(check_out_time),
                    inline=True
                )
                embed.add_field(
                    name="Âã§ÂãôÊôÇÈñì",
                    value=f"{work_hours:.1f}ÊôÇÈñì",
                    inline=True
                )
                
                if overtime_hours > 0:
                    embed.add_field(
                        name="ÊÆãÊ•≠ÊôÇÈñì",
                        value=f"{overtime_hours:.1f}ÊôÇÈñì",
                        inline=True
                    )
                
                log_user_action(
                    logger, interaction.user.id, "clock_out",
                    time=check_out_time.isoformat(),
                    work_hours=work_hours,
                    overtime_hours=overtime_hours
                )
            else:
                raise SystemError("Failed to update attendance record", error_code="ATTENDANCE_UPDATE_FAILED")
            
            embed.set_footer(text=f"{interaction.user.display_name}")
            await interaction.followup.send(embed=embed, ephemeral=True)
            
        except Exception as e:
            result = await self.error_handler.handle_error_async(e, context)
            if result.should_notify_user:
                embed = discord.Embed(
                    title="‚ùå „Ç®„É©„Éº",
                    description=result.user_message,
                    color=discord.Color.red()
                )
                await interaction.followup.send(embed=embed, ephemeral=True)
    
    @discord.ui.button(label='üü° ‰ºëÊÜ©ÈñãÂßã', style=discord.ButtonStyle.secondary, custom_id='break_start')
    async def break_start_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """‰ºëÊÜ©ÈñãÂßã„Éú„Çø„É≥"""
        await interaction.response.defer()
        
        context = ErrorContext(
            user_id=interaction.user.id,
            guild_id=interaction.guild.id if interaction.guild else None,
            channel_id=interaction.channel.id if interaction.channel else None,
            command="attendance_break_start"
        )
        
        try:
            db_manager = get_database_manager()
            
            # „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèñÂæó
            user = await db_manager.get_user(interaction.user.id)
            if not user:
                raise UserError(
                    "User not found",
                    "Âá∫Âã§Ë®òÈå≤„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ„Åæ„ÅöÂá∫Âã§„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
                    error_code="USER_NOT_FOUND"
                )
            
            today_date = format_date_only(today_jst())
            today_record = await db_manager.get_attendance_record(user['discord_id'], today_date)
            
            if not today_record or not today_record.get('check_in'):
                raise UserError(
                    "No check-in record found",
                    "Âá∫Âã§Ë®òÈå≤„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ„Åæ„ÅöÂá∫Âã§„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
                    error_code="NO_CHECK_IN"
                )
            
            if today_record.get('break_start') and not today_record.get('break_end'):
                raise UserError(
                    "Already on break",
                    "Êó¢„Å´‰ºëÊÜ©‰∏≠„Åß„Åô„ÄÇ",
                    error_code="ALREADY_ON_BREAK"
                )
            
            # ‰ºëÊÜ©ÈñãÂßãË®òÈå≤
            break_start_time = now_jst()
            success = await db_manager.update_attendance_record(
                user['discord_id'], today_date, break_start=break_start_time
            )
            
            if success:
                embed = discord.Embed(
                    title="üü° ‰ºëÊÜ©ÈñãÂßã",
                    description="‰ºëÊÜ©„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü",
                    color=discord.Color.gold(),
                    timestamp=now_jst()
                )
                embed.add_field(
                    name="‰ºëÊÜ©ÈñãÂßãÊôÇÂàª",
                    value=format_time_only(break_start_time),
                    inline=True
                )
                
                log_user_action(
                    logger, interaction.user.id, "break_start",
                    time=break_start_time.isoformat()
                )
            else:
                raise SystemError("Failed to start break", error_code="BREAK_START_FAILED")
            
            embed.set_footer(text=f"{interaction.user.display_name}")
            await interaction.followup.send(embed=embed, ephemeral=True)
            
        except Exception as e:
            result = await self.error_handler.handle_error_async(e, context)
            if result.should_notify_user:
                embed = discord.Embed(
                    title="‚ùå „Ç®„É©„Éº",
                    description=result.user_message,
                    color=discord.Color.red()
                )
                await interaction.followup.send(embed=embed, ephemeral=True)
    
    @discord.ui.button(label='üü¢ ‰ºëÊÜ©ÁµÇ‰∫Ü', style=discord.ButtonStyle.secondary, custom_id='break_end')
    async def break_end_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """‰ºëÊÜ©ÁµÇ‰∫Ü„Éú„Çø„É≥"""
        await interaction.response.defer()
        
        context = ErrorContext(
            user_id=interaction.user.id,
            guild_id=interaction.guild.id if interaction.guild else None,
            channel_id=interaction.channel.id if interaction.channel else None,
            command="attendance_break_end"
        )
        
        try:
            db_manager = get_database_manager()
            
            # „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèñÂæó
            user = await db_manager.get_user(interaction.user.id)
            if not user:
                raise UserError(
                    "User not found",
                    "Âá∫Âã§Ë®òÈå≤„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ„Åæ„ÅöÂá∫Âã§„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
                    error_code="USER_NOT_FOUND"
                )
            
            today_date = format_date_only(today_jst())
            today_record = await db_manager.get_attendance_record(user['discord_id'], today_date)
            
            if not today_record or not today_record.get('check_in'):
                raise UserError(
                    "No check-in record found",
                    "Âá∫Âã§Ë®òÈå≤„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ„Åæ„ÅöÂá∫Âã§„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
                    error_code="NO_CHECK_IN"
                )
            
            if not today_record.get('break_start'):
                raise UserError(
                    "No break started",
                    "‰ºëÊÜ©„ÇíÈñãÂßã„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ",
                    error_code="NO_BREAK_STARTED"
                )
            
            if today_record.get('break_end'):
                raise UserError(
                    "Break already ended",
                    "Êó¢„Å´‰ºëÊÜ©„ÇíÁµÇ‰∫Ü„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ",
                    error_code="BREAK_ALREADY_ENDED"
                )
            
            # ‰ºëÊÜ©ÁµÇ‰∫ÜË®òÈå≤
            break_end_time = now_jst()
            break_duration = calculate_time_difference(
                today_record['break_start'], break_end_time
            )
            
            success = await db_manager.update_attendance_record(
                user['discord_id'], today_date, break_end=break_end_time
            )
            
            if success:
                embed = discord.Embed(
                    title="üü¢ ‰ºëÊÜ©ÁµÇ‰∫Ü",
                    description="‰ºëÊÜ©„ÇíÁµÇ‰∫Ü„Åó„Åæ„Åó„Åü",
                    color=discord.Color.green(),
                    timestamp=now_jst()
                )
                embed.add_field(
                    name="‰ºëÊÜ©ÁµÇ‰∫ÜÊôÇÂàª",
                    value=format_time_only(break_end_time),
                    inline=True
                )
                embed.add_field(
                    name="‰ºëÊÜ©ÊôÇÈñì",
                    value=f"{break_duration:.1f}ÊôÇÈñì",
                    inline=True
                )
                
                log_user_action(
                    logger, interaction.user.id, "break_end",
                    time=break_end_time.isoformat(),
                    break_duration=break_duration
                )
            else:
                raise SystemError("Failed to end break", error_code="BREAK_END_FAILED")
            
            embed.set_footer(text=f"{interaction.user.display_name}")
            await interaction.followup.send(embed=embed, ephemeral=True)
            
        except Exception as e:
            result = await self.error_handler.handle_error_async(e, context)
            if result.should_notify_user:
                embed = discord.Embed(
                    title="‚ùå „Ç®„É©„Éº",
                    description=result.user_message,
                    color=discord.Color.red()
                )
                await interaction.followup.send(embed=embed, ephemeral=True)


class AttendanceCog(commands.Cog):
    """Âá∫ÈÄÄÂã§ÁÆ°ÁêÜÊ©üËÉΩ„ÇíÊèê‰æõ„Åô„ÇãCog"""
    
    def __init__(self, bot):
        self.bot = bot
        self.error_handler = get_error_handler()
        # Ê∞∏Á∂öÁöÑ„Å™View„ÇíËøΩÂä†
        bot.add_view(AttendanceView())
    
    @commands.command(name='Âá∫ÈÄÄÂã§', aliases=['attendance', 'punch'])
    @handle_errors()
    async def attendance_panel(self, ctx):
        """Âá∫ÈÄÄÂã§ÁÆ°ÁêÜ„Éë„Éç„É´„ÇíË°®Á§∫"""
        embed = discord.Embed(
            title="üè¢ Âá∫ÈÄÄÂã§ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†",
            description="‰ª•‰∏ã„ÅÆ„Éú„Çø„É≥„ÅßÂá∫ÈÄÄÂã§„ÇíË®òÈå≤„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
            color=discord.Color.blue(),
            timestamp=now_jst()
        )
        
        embed.add_field(
            name="üü¢ Âá∫Âã§",
            value="Âã§ÂãôÈñãÂßãÊôÇ„Å´„ÇØ„É™„ÉÉ„ÇØ",
            inline=True
        )
        embed.add_field(
            name="üî¥ ÈÄÄÂã§", 
            value="Âã§ÂãôÁµÇ‰∫ÜÊôÇ„Å´„ÇØ„É™„ÉÉ„ÇØ",
            inline=True
        )
        embed.add_field(
            name="üü° ‰ºëÊÜ©",
            value="‰ºëÊÜ©„ÅÆÈñãÂßã„ÉªÁµÇ‰∫ÜÊôÇ„Å´„ÇØ„É™„ÉÉ„ÇØ",
            inline=True
        )
        
        embed.add_field(
            name="üìä Âã§ÊÄ†Á¢∫Ë™ç",
            value="`!Âã§ÊÄ†Á¢∫Ë™ç` „Ç≥„Éû„É≥„Éâ„ÅßÂÄã‰∫∫„ÅÆÂã§ÊÄ†„ÇíÁ¢∫Ë™ç",
            inline=False
        )
        embed.add_field(
            name="üìà ÊúàÊ¨°Âã§ÊÄ†",
            value="`!ÊúàÊ¨°Âã§ÊÄ†` „Ç≥„Éû„É≥„Éâ„ÅßÊúàÊ¨°„É¨„Éù„Éº„Éà„ÇíÁ¢∫Ë™ç",
            inline=False
        )
        embed.add_field(
            name="üìã CSVÂá∫Âäõ",
            value="`!Âã§ÊÄ†CSV` „Ç≥„Éû„É≥„Éâ„ÅßÂã§ÊÄ†„Éá„Éº„Çø„ÇíCSV„Åß„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ",
            inline=False
        )
        
        embed.set_footer(text="‰ºÅÊ•≠Áî®Discord Bot - Âá∫ÈÄÄÂã§ÁÆ°ÁêÜ")
        
        view = AttendanceView()
        await ctx.send(embed=embed, view=view)
        
        log_command_execution(
            logger, "attendance_panel", ctx.author.id, 
            ctx.guild.id if ctx.guild else None, True
        )
    
    @commands.command(name='Âã§ÊÄ†Á¢∫Ë™ç', aliases=['attendance_status', 'status'])
    @require_registration
    @handle_errors()
    async def check_attendance(self, ctx, target_date: str = None):
        """Ëá™ÂàÜ„ÅÆÂã§ÊÄ†Áä∂Ê≥Å„ÇíÁ¢∫Ë™ç"""
        db_manager = get_database_manager()
        
        # Êó•‰ªò„ÇíË®≠ÂÆö
        if target_date is None:
            target_date = format_date_only(today_jst())
        else:
            try:
                parse_date_string(target_date)  # Ê§úË®º„ÅÆ„Åø
            except ValueError as e:
                raise UserError(str(e), str(e), error_code="INVALID_DATE_FORMAT")
        
        # Âã§ÊÄ†Ë®òÈå≤„ÇíÂèñÂæó
        record = await db_manager.get_attendance_record(ctx.author.id, target_date)
        
        if not record:
            embed = discord.Embed(
                title="üìä Âã§ÊÄ†Áä∂Ê≥Å",
                description=f"{target_date} „ÅÆÂã§ÊÄ†Ë®òÈå≤„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì",
                color=discord.Color.orange()
            )
        else:
            embed = discord.Embed(
                title=f"üìä Âã§ÊÄ†Áä∂Ê≥Å - {target_date}",
                color=discord.Color.blue(),
                timestamp=now_jst()
            )
            
            # „Çπ„ÉÜ„Éº„Çø„Çπ„ÇíÂà§ÂÆö
            status = "Êú™Âá∫Âã§"
            status_emoji = "‚ö™"
            
            if record.get('check_in'):
                if record.get('check_out'):
                    status = "ÈÄÄÂã§"
                    status_emoji = "üî¥"
                elif record.get('break_start') and not record.get('break_end'):
                    status = "‰ºëÊÜ©‰∏≠"
                    status_emoji = "üü°"
                else:
                    status = "Âú®Â∏≠"
                    status_emoji = "üü¢"
            
            embed.add_field(
                name="ÁèæÂú®„ÅÆ„Çπ„ÉÜ„Éº„Çø„Çπ",
                value=f"{status_emoji} {status}",
                inline=True
            )
            
            if record.get('check_in'):
                embed.add_field(
                    name="Âá∫Âã§ÊôÇÂàª",
                    value=format_time_only(record['check_in']),
                    inline=True
                )
            
            if record.get('check_out'):
                embed.add_field(
                    name="ÈÄÄÂã§ÊôÇÂàª",
                    value=format_time_only(record['check_out']),
                    inline=True
                )
            
            if record.get('work_hours'):
                embed.add_field(
                    name="Âã§ÂãôÊôÇÈñì",
                    value=f"{record['work_hours']:.1f}ÊôÇÈñì",
                    inline=True
                )
            
            if record.get('overtime_hours') and record['overtime_hours'] > 0:
                embed.add_field(
                    name="ÊÆãÊ•≠ÊôÇÈñì",
                    value=f"{record['overtime_hours']:.1f}ÊôÇÈñì",
                    inline=True
                )
            
            if record.get('break_start') and record.get('break_end'):
                break_duration = calculate_time_difference(
                    record['break_start'], 
                    record['break_end']
                )
                embed.add_field(
                    name="‰ºëÊÜ©ÊôÇÈñì",
                    value=f"{break_duration:.1f}ÊôÇÈñì",
                    inline=True
                )
        
        embed.set_footer(text=f"„É¶„Éº„Ç∂„Éº: {ctx.author.display_name}")
        await ctx.send(embed=embed)
        
        log_command_execution(
            logger, "check_attendance", ctx.author.id, 
            ctx.guild.id if ctx.guild else None, True,
            target_date=target_date
        )
    
    @commands.command(name='Âú®Â∏≠Áä∂Ê≥Å', aliases=['who_is_here', 'status_all'])
    @handle_errors()
    async def show_all_status(self, ctx):
        """ÂÖ®Âì°„ÅÆÂú®Â∏≠Áä∂Ê≥Å„ÇíË°®Á§∫"""
        db_manager = get_database_manager()
        
        # ‰ªäÊó•„ÅÆÊó•‰ªò
        today_date = format_date_only(today_jst())
        
        # ÂÖ®„É¶„Éº„Ç∂„Éº„ÇíÂèñÂæó
        users = await db_manager.list_users()
        
        if not users:
            await ctx.send("ÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Çã„É¶„Éº„Ç∂„Éº„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ")
            return
        
        embed = discord.Embed(
            title="üë• Âú®Â∏≠Áä∂Ê≥Å‰∏ÄË¶ß",
            description=f"ÁèæÂú®„ÅÆÊôÇÂàª: {format_time_only(now_jst())}",
            color=discord.Color.blue(),
            timestamp=now_jst()
        )
        
        # „Çπ„ÉÜ„Éº„Çø„ÇπÂà•„Å´„É¶„Éº„Ç∂„Éº„ÇíÂàÜÈ°û
        status_groups = {
            'Âú®Â∏≠': [],
            '‰ºëÊÜ©‰∏≠': [],
            'ÈÄÄÂã§': [],
            'Êú™Âá∫Âã§': []
        }
        
        for user in users:
            display_name = user['display_name'] or user['username']
            
            # ‰ªäÊó•„ÅÆÂá∫Âã§Ë®òÈå≤„ÇíÂèñÂæó
            record = await db_manager.get_attendance_record(user['discord_id'], today_date)
            
            if not record or not record.get('check_in'):
                status = 'Êú™Âá∫Âã§'
                time_info = ""
            elif record.get('check_out'):
                status = 'ÈÄÄÂã§'
                time_info = f" (Âá∫Âã§: {format_time_only(record['check_in'])})"
            elif record.get('break_start') and not record.get('break_end'):
                status = '‰ºëÊÜ©‰∏≠'
                time_info = f" (Âá∫Âã§: {format_time_only(record['check_in'])})"
            else:
                status = 'Âú®Â∏≠'
                time_info = f" (Âá∫Âã§: {format_time_only(record['check_in'])})"
            
            status_groups[status].append(f"{display_name}{time_info}")
        
        # ÂêÑ„Çπ„ÉÜ„Éº„Çø„Çπ„Åî„Å®„Å´„Éï„Ç£„Éº„É´„Éâ„ÇíËøΩÂä†
        status_emojis = {
            'Âú®Â∏≠': 'üü¢',
            '‰ºëÊÜ©‰∏≠': 'üü°', 
            'ÈÄÄÂã§': 'üî¥',
            'Êú™Âá∫Âã§': '‚ö´'
        }
        
        for status, users_list in status_groups.items():
            if users_list:
                emoji = status_emojis.get(status, '‚ö™')
                embed.add_field(
                    name=f"{emoji} {status} ({len(users_list)}Âêç)",
                    value='\n'.join(users_list[:10]) + ('...' if len(users_list) > 10 else ''),
                    inline=True
                )
        
        await ctx.send(embed=embed)
        
        log_command_execution(
            logger, "show_all_status", ctx.author.id, 
            ctx.guild.id if ctx.guild else None, True
        )
    
    @commands.command(name='ÊúàÊ¨°Âã§ÊÄ†', aliases=['monthly_report'])
    @require_registration
    @handle_errors()
    async def monthly_attendance_report(self, ctx, year: int = None, month: int = None):
        """ÊúàÊ¨°Âã§ÊÄ†„É¨„Éù„Éº„Éà„ÇíË°®Á§∫"""
        db_manager = get_database_manager()
        
        # „Éá„Éï„Ç©„É´„ÉàÂÄ§„ÇíË®≠ÂÆö
        if year is None or month is None:
            now = now_jst()
            year = year or now.year
            month = month or now.month
        
        # Êúà„ÅÆÂ¶•ÂΩìÊÄß„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        if not (1 <= month <= 12):
            raise UserError(
                "Invalid month",
                "Êúà„ÅØ1„Äú12„ÅÆÁØÑÂõ≤„ÅßÊåáÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
                error_code="INVALID_MONTH"
            )
        
        # Êúà„ÅÆÊó•‰ªòÁØÑÂõ≤„ÇíÂèñÂæó
        start_date, end_date = get_month_date_range(year, month)
        start_date_str = format_date_only(start_date)
        end_date_str = format_date_only(end_date)
        
        # ÊúàÊ¨°Âã§ÊÄ†Ë®òÈå≤„ÇíÂèñÂæó
        records = await db_manager.get_attendance_by_date_range(
            ctx.author.id, start_date_str, end_date_str
        )
        
        if not records:
            embed = discord.Embed(
                title="üìä ÊúàÊ¨°Âã§ÊÄ†„É¨„Éù„Éº„Éà",
                description=f"{year}Âπ¥{month}Êúà„ÅÆÂã§ÊÄ†Ë®òÈå≤„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì",
                color=discord.Color.orange()
            )
        else:
            # Áµ±Ë®à„ÇíË®àÁÆó
            total_work_days = len([r for r in records if r.get('check_in')])
            total_work_hours = sum(r.get('work_hours', 0) for r in records)
            total_overtime_hours = sum(r.get('overtime_hours', 0) for r in records)
            avg_work_hours = total_work_hours / total_work_days if total_work_days > 0 else 0
            
            embed = discord.Embed(
                title=f"üìä ÊúàÊ¨°Âã§ÊÄ†„É¨„Éù„Éº„Éà - {year}Âπ¥{month}Êúà",
                color=discord.Color.blue(),
                timestamp=now_jst()
            )
            
            embed.add_field(
                name="Âá∫Âã§Êó•Êï∞",
                value=f"{total_work_days}Êó•",
                inline=True
            )
            embed.add_field(
                name="Á∑èÂã§ÂãôÊôÇÈñì",
                value=f"{total_work_hours:.1f}ÊôÇÈñì",
                inline=True
            )
            embed.add_field(
                name="Á∑èÊÆãÊ•≠ÊôÇÈñì",
                value=f"{total_overtime_hours:.1f}ÊôÇÈñì",
                inline=True
            )
            embed.add_field(
                name="Âπ≥ÂùáÂã§ÂãôÊôÇÈñì",
                value=f"{avg_work_hours:.1f}ÊôÇÈñì/Êó•",
                inline=True
            )
            
            # Ë©≥Á¥∞ÊÉÖÂ†±ÔºàÊúÄÊñ∞5‰ª∂Ôºâ
            recent_records = sorted(records, key=lambda x: x['date'], reverse=True)[:5]
            details = []
            for record in recent_records:
                work_date = record['date']
                work_hours = record.get('work_hours', 0)
                overtime = record.get('overtime_hours', 0)
                
                # „Çπ„ÉÜ„Éº„Çø„Çπ„ÇíÂà§ÂÆö
                if record.get('check_out'):
                    status = "ÈÄÄÂã§"
                elif record.get('check_in'):
                    status = "Âá∫Âã§‰∏≠"
                else:
                    status = "Êú™Âá∫Âã§"
                
                detail = f"**{work_date}**: {work_hours:.1f}h"
                if overtime > 0:
                    detail += f" (ÊÆãÊ•≠ {overtime:.1f}h)"
                detail += f" - {status}"
                details.append(detail)
            
            if details:
                embed.add_field(
                    name="ÊúÄËøë„ÅÆÂã§ÊÄ†Ë®òÈå≤",
                    value='\n'.join(details),
                    inline=False
                )
        
        embed.set_footer(text=f"„É¶„Éº„Ç∂„Éº: {ctx.author.display_name}")
        await ctx.send(embed=embed)
        
        log_command_execution(
            logger, "monthly_attendance_report", ctx.author.id, 
            ctx.guild.id if ctx.guild else None, True,
            year=year, month=month
        )
    
    @commands.command(name='Âã§ÊÄ†CSV', aliases=['attendance_csv', 'export_csv'])
    @require_registration
    @handle_errors()
    async def export_attendance_csv(self, ctx, start_date: str = None, end_date: str = None, user_mention: discord.Member = None):
        """Âã§ÊÄ†„Éá„Éº„Çø„ÇíCSVÂΩ¢Âºè„Åß„Ç®„ÇØ„Çπ„Éù„Éº„Éà"""
        db_manager = get_database_manager()
        
        # Êó•‰ªò„ÅÆ„Éá„Éï„Ç©„É´„ÉàË®≠ÂÆö
        if not start_date or not end_date:
            # ‰ªäÊúà„ÅÆ„Éá„Éº„Çø„ÇíÂá∫Âäõ
            year, month = now_jst().year, now_jst().month
            start_date_obj, end_date_obj = get_month_date_range(year, month)
            start_date = format_date_only(start_date_obj)
            end_date = format_date_only(end_date_obj)
        else:
            # Êó•‰ªò„ÅÆÂ¶•ÂΩìÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
            try:
                start_date_obj = parse_date_string(start_date)
                end_date_obj = parse_date_string(end_date)
                if start_date_obj > end_date_obj:
                    raise UserError(
                        "Invalid date range",
                        "ÈñãÂßãÊó•„ÅØÁµÇ‰∫ÜÊó•„Çà„ÇäÂâç„Åß„ÅÇ„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ",
                        error_code="INVALID_DATE_RANGE"
                    )
            except ValueError as e:
                raise UserError(str(e), str(e), error_code="INVALID_DATE_FORMAT")
        
        # „É¶„Éº„Ç∂„Éº„ÅÆÊåáÂÆöÔºàÁÆ°ÁêÜËÄÖ„ÅÆ„Åø‰ªñ„É¶„Éº„Ç∂„Éº„ÅÆ„Éá„Éº„Çø„ÇíÂèñÂæóÂèØËÉΩÔºâ
        target_user_id = ctx.author.id
        filename_prefix = f"attendance_{ctx.author.name}"
        
        if user_mention:
            # ÁÆ°ÁêÜËÄÖÊ®©Èôê„ÉÅ„Çß„ÉÉ„ÇØ
            if not ctx.author.guild_permissions.administrator:
                raise UserError(
                    "Permission denied",
                    "‰ªñ„ÅÆ„É¶„Éº„Ç∂„Éº„ÅÆ„Éá„Éº„Çø„ÇíÂèñÂæó„Åô„Çã„Å´„ÅØÁÆ°ÁêÜËÄÖÊ®©Èôê„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ",
                    error_code="PERMISSION_DENIED"
                )
            
            user = await db_manager.get_user(user_mention.id)
            if not user:
                raise UserError(
                    "User not found",
                    "ÊåáÂÆö„Åï„Çå„Åü„É¶„Éº„Ç∂„Éº„ÅÆÂã§ÊÄ†Ë®òÈå≤„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ",
                    error_code="USER_NOT_FOUND"
                )
            
            target_user_id = user_mention.id
            filename_prefix = f"attendance_{user_mention.name}"
        
        # „Éá„Éº„ÇøÂèñÂæó
        attendance_data = await db_manager.get_attendance_by_date_range(
            target_user_id, start_date, end_date
        )
        
        if not attendance_data:
            raise UserError(
                "No data found",
                f"{start_date} „Åã„Çâ {end_date} „ÅÆÊúüÈñì„Å´Âã§ÊÄ†„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ",
                error_code="NO_DATA_FOUND"
            )
        
        # CSV‰ΩúÊàê
        output = io.StringIO()
        writer = csv.writer(output)
        
        # „Éò„ÉÉ„ÉÄ„Éº
        writer.writerow([
            'Êó•‰ªò', '„É¶„Éº„Ç∂„ÉºÂêç', 'Ë°®Á§∫Âêç', 'Âá∫Âã§ÊôÇÂàª', 'ÈÄÄÂã§ÊôÇÂàª',
            '‰ºëÊÜ©ÈñãÂßã', '‰ºëÊÜ©ÁµÇ‰∫Ü', 'Á∑èÂã§ÂãôÊôÇÈñìÔºàÊôÇÈñìÔºâ', 'ÊÆãÊ•≠ÊôÇÈñìÔºàÊôÇÈñìÔºâ', '„Çπ„ÉÜ„Éº„Çø„Çπ'
        ])
        
        # „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèñÂæó
        user_info = await db_manager.get_user(target_user_id)
        user_name = user_info['username'] if user_info else "Unknown"
        display_name = user_info['display_name'] if user_info else "Unknown"
        
        # „Éá„Éº„ÇøË°å
        for record in attendance_data:
            # „Çπ„ÉÜ„Éº„Çø„Çπ„ÇíÂà§ÂÆö
            if record.get('check_out'):
                status = "ÈÄÄÂã§"
            elif record.get('check_in'):
                status = "Âá∫Âã§‰∏≠"
            else:
                status = "Êú™Âá∫Âã§"
            
            writer.writerow([
                record.get('date', ''),
                user_name,
                display_name,
                format_time_only(record.get('check_in')),
                format_time_only(record.get('check_out')),
                format_time_only(record.get('break_start')),
                format_time_only(record.get('break_end')),
                f"{record.get('work_hours', 0):.1f}",
                f"{record.get('overtime_hours', 0):.1f}",
                status
            ])
        
        # „Éï„Ç°„Ç§„É´„Å®„Åó„Å¶ÈÄÅ‰ø°
        output.seek(0)
        filename = f"{filename_prefix}_{start_date}_to_{end_date}.csv"
        
        # UTF-8 BOM‰ªò„Åç„ÅßÈÄÅ‰ø°ÔºàExcel„Åß„ÅÆÊñáÂ≠óÂåñ„ÅëÂØæÁ≠ñÔºâ
        bom = '\ufeff'
        csv_content = bom + output.getvalue()
        file = discord.File(io.BytesIO(csv_content.encode('utf-8')), filename=filename)
        
        embed = discord.Embed(
            title="üìä Âã§ÊÄ†„Éá„Éº„Çø„Ç®„ÇØ„Çπ„Éù„Éº„ÉàÂÆå‰∫Ü",
            description=f"ÊúüÈñì: {start_date} „Åã„Çâ {end_date}",
            color=discord.Color.green(),
            timestamp=now_jst()
        )
        embed.add_field(
            name="„É¨„Ç≥„Éº„ÉâÊï∞",
            value=f"{len(attendance_data)}‰ª∂",
            inline=True
        )
        
        await ctx.send(embed=embed, file=file)
        
        log_command_execution(
            logger, "export_attendance_csv", ctx.author.id, 
            ctx.guild.id if ctx.guild else None, True,
            start_date=start_date, end_date=end_date,
            target_user=user_mention.name if user_mention else "self"
        )
    
    @commands.command(name='Âã§ÊÄ†CSV‰Ωø„ÅÑÊñπ', aliases=['csv_help'])
    @handle_errors()
    async def csv_help(self, ctx):
        """Âã§ÊÄ†CSVÂá∫Âäõ„ÅÆ‰Ωø„ÅÑÊñπ„ÇíË°®Á§∫"""
        embed = discord.Embed(
            title="üìã Âã§ÊÄ†CSVÂá∫Âäõ„ÅÆ‰Ωø„ÅÑÊñπ",
            description="Âã§ÊÄ†„Éá„Éº„Çø„ÇíCSVÂΩ¢Âºè„Åß„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åô„ÇãÊñπÊ≥ï",
            color=discord.Color.blue()
        )
        
        embed.add_field(
            name="Âü∫Êú¨ÁöÑ„Å™‰Ωø„ÅÑÊñπ",
            value="`!Âã§ÊÄ†CSV` - ‰ªäÊúà„ÅÆËá™ÂàÜ„ÅÆÂã§ÊÄ†„Éá„Éº„Çø„ÇíÂá∫Âäõ",
            inline=False
        )
        
        embed.add_field(
            name="ÊúüÈñì„ÇíÊåáÂÆö",
            value="`!Âã§ÊÄ†CSV 2023-11-01 2023-11-30` - ÊåáÂÆöÊúüÈñì„ÅÆ„Éá„Éº„Çø„ÇíÂá∫Âäõ",
            inline=False
        )
        
        embed.add_field(
            name="‰ªñ„ÅÆ„É¶„Éº„Ç∂„Éº„ÅÆ„Éá„Éº„ÇøÔºàÁÆ°ÁêÜËÄÖ„ÅÆ„ÅøÔºâ",
            value="`!Âã§ÊÄ†CSV 2023-11-01 2023-11-30 @„É¶„Éº„Ç∂„ÉºÂêç`",
            inline=False
        )
        
        embed.add_field(
            name="Ê≥®ÊÑè‰∫ãÈ†Ö",
            value="‚Ä¢ Êó•‰ªò„ÅØYYYY-MM-DDÂΩ¢Âºè„ÅßÊåáÂÆö\n‚Ä¢ CSV„Éï„Ç°„Ç§„É´„ÅØUTF-8ÔºàBOM‰ªò„ÅçÔºâ„ÅßÂá∫Âäõ\n‚Ä¢ Excel„ÅßÈñã„ÅèÈöõ„ÅÆÊñáÂ≠óÂåñ„Åë„ÇíÈò≤Ê≠¢",
            inline=False
        )
        
        await ctx.send(embed=embed)
        
        log_command_execution(
            logger, "csv_help", ctx.author.id, 
            ctx.guild.id if ctx.guild else None, True
        )


async def setup(bot):
    """Cog„ÅÆ„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó"""
    await bot.add_cog(AttendanceCog(bot)) 